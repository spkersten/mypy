[case testPropagatingParseErrors]
in 1
def f():
  1 1
[out]
main, line 1: Parse error before in
main: In function "f":
main, line 3: Parse error before numeric literal

[case testUndefinedVariableInGlobalStatement]
import typing
x
y
[out]
main, line 2: Name 'x' is not defined
main, line 3: Name 'y' is not defined

[case testUndefinedVariableWithinFunctionContext]
import typing
def f():
  x
y
[out]
main: In function "f":
main, line 3: Name 'x' is not defined
main: At top level:
main, line 4: Name 'y' is not defined

[case testMethodScope]
import typing
class A:
  def f(self): pass
f
[out]
main, line 4: Name 'f' is not defined

[case testMethodScope2]
import typing
class A:
  def f(self): pass
class B:
  def g(self):
    f # error
    g # error
[out]
main: In function "g":
main, line 6: Name 'f' is not defined
main, line 7: Name 'g' is not defined

[case testInvalidType]
import typing
x = None # type: X
[out]
main, line 2: Name 'X' is not defined

[case testInvalidGenericArg]
from typing import TypeVar, Generic
t = TypeVar('t')
class A(Generic[t]): pass
x = 0 # type: A[y]
[out]
main, line 4: Name 'y' is not defined

[case testInvalidNumberOfGenericArgsInTypeDecl]
from typing import TypeVar, Generic
t = TypeVar('t')
class A: pass
class B(Generic[t]): pass
x = 0 # type: B[A, A]
y = 0 # type: A[A]
[out]
main, line 5: "B" expects 1 type argument, but 2 given
main, line 6: "A" expects no type arguments, but 1 given

[case testInvalidNumberOfGenericArgsInUndefinedArg]
from typing import Undefined
class A: pass
x = Undefined(A[int]) # E: "A" expects no type arguments, but 1 given
[out]

[case testInvalidNumberOfGenericArgsInNestedBlock]
from typing import Undefined
class A: pass
class B:
    def f(self) -> None:
        while 1:
            x = Undefined(A[int]) \
                # E: "A" expects no type arguments, but 1 given
[out]
main: In function "f":

[case testInvalidNumberOfGenericArgsInSignature]
import typing
class A: pass
def f() -> A[int]: pass # E: "A" expects no type arguments, but 1 given
[out]
main: In function "f":

[case testInvalidNumberOfGenericArgsInOverloadedSignature]
from typing import overload
class A: pass
@overload
def f(): pass
@overload
def f(x: A[int]) -> None: pass # E: "A" expects no type arguments, but 1 given
[out]
main: In function "f":

[case testInvalidNumberOfGenericArgsInBaseType]
import typing
class A: pass
class B(A[int]): pass # E: "A" expects no type arguments, but 1 given
[out]

[case testInvalidNumberOfGenericArgsInCast]
from typing import cast
class A: pass
x = cast(A[int], 1) # E: "A" expects no type arguments, but 1 given
[out]

[case testInvalidNumberOfGenericArgsInTypeApplication]
import typing
class A: pass
class B: pass
x = A[B[int]]() # E: "B" expects no type arguments, but 1 given
[out]

[case testInvalidNumberOfGenericArgsInNestedGenericType]
from typing import TypeVar, Generic
T = TypeVar('T')
class A(Generic[T]): pass
class B: pass
def f() -> A[B[int]]: pass # E: "B" expects no type arguments, but 1 given
[out]
main: In function "f":

[case testInvalidNumberOfGenericArgsInTupleType]
from typing import Tuple, Undefined
class A: pass
x = Undefined(Tuple[A[int]]) # E: "A" expects no type arguments, but 1 given
[out]

[case testInvalidNumberOfGenericArgsInFunctionType]
from typing import Callable, Undefined
class A: pass
x = Undefined(Callable[[A[int]], int]) \
              # E: "A" expects no type arguments, but 1 given
x = Undefined(Callable[[], A[int]]) \
              # E: "A" expects no type arguments, but 1 given
[out]

[case testVarOrFuncAsType]
import typing
def f(): pass
x = 1
y = 0 # type: f
z = 0 # type: x
[out]
main, line 4: Invalid type "__main__.f"
main, line 5: Invalid type "__main__.x"

[case testTwoStarsInType]
import typing
x = 1 # type: *object, *object
y = 1 # type: object, (*object, *object)
z = 1 # type: *object, (object, *object)
[out]
main, line 2: At most one star type allowed in a tuple
main, line 3: At most one star type allowed in a tuple

[case testGlobalVarRedefinition]
import typing
class A: pass
x = 0 # type: A
x = 0 # type: A
[out]
main, line 4: Name 'x' already defined

[case testLocalVarRedefinition]
import typing
class A: pass
def f():
  x = 0 # type: A
  x = 0 # type: A
[out]
main: In function "f":
main, line 5: Name 'x' already defined

[case testClassVarRedefinition]
import typing
class A:
  x = 0 # type: object
  x = 0 # type: object
[out]
main, line 4: Name 'x' already defined

[case testMultipleClassDefinitions]
import typing
class A: pass
class A: pass
[out]
main, line 3: Name 'A' already defined

[case testMultipleMixedDefinitions]
import typing
x = 1
def x(): pass
class x: pass
[out]
main, line 3: Name 'x' already defined
main, line 4: Name 'x' already defined

[case testNameNotImported]
import typing
from m import y
x
[file m.py]
x = y = 1
[out]
main, line 3: Name 'x' is not defined

[case testMissingNameInImportFrom]
import typing
from m import y
[file m.py]
x = 1
[out]
main, line 2: Module has no attribute 'y'

[case testMissingModule]
import typing
import m
[out]
main, line 2: No module named 'm'

[case testMissingModule2]
import typing
from m import x
[out]
main, line 2: No module named 'm'

[case testMissingModule3]
import typing
from m import *
[out]
main, line 2: No module named 'm'

[case testMissingModuleRelativeImport]
import typing
import m
[file m/__init__.py]
from .x import y
[out]
In module imported in main, line 2:
tmp/m/__init__.py, line 1: No module named 'm.x'

[case testMissingModuleRelativeImport2]
import typing
import m.a
[file m/__init__.py]
[file m/a.py]
from .x import y
[out]
In module imported in main, line 2:
tmp/m/a.py, line 1: No module named 'm.x'

[case testModuleNotImported]
import typing
import _m
_n.x
[file _m.py]
import _n
[file _n.py]
x = 1
[out]
main, line 3: Name '_n' is not defined

[case testImportAsteriskPlusUnderscore]
import typing
from _m import *
_x
__x__
[file _m.py]
_x = __x__ = 1
[out]
main, line 3: Name '_x' is not defined
main, line 4: Name '__x__' is not defined

[case testRelativeImportAtTopLevelModule]
from . import m
[out]
main, line 1: No parent module -- cannot perform relative import

[case testRelativeImportAtTopLevelModule]
from .. import m
[out]
main, line 1: No parent module -- cannot perform relative import

[case testUndefinedTypeWithQualifiedName]
import typing
import m
def f() -> m.c: pass
def g() -> n.c: pass
[file m.py]
[out]
main: In function "f":
main, line 3: Name 'm.c' is not defined
main: In function "g":
main, line 4: Name 'n' is not defined

[case testMissingPackage]
import typing
import m.n
[out]
main, line 2: No module named 'm.n'

[case testMissingPackage]
import typing
from m.n import x
from a.b import *
[out]
main, line 2: No module named 'm.n'
main, line 3: No module named 'a.b'

[case testErrorInImportedModule]
import m
[file m.py]
import typing
x = y
[out]
In module imported in main, line 1:
tmp/m.py, line 2: Name 'y' is not defined

[case testErrorInImportedModule2]
import m.n
[file m/__init__.py]
[file m/n.py]
import k
[file k.py]
import typing
x = y
[out]
In module imported in tmp/m/n.py, line 1,
                   in main, line 1:
tmp/k.py, line 2: Name 'y' is not defined

[case testPackageWithoutInitFile]
import typing
import m.n
m.n.x
[file m/n.py]
x = 1
[out]
main, line 2: No module named 'm.n'

[case testBreakOutsideLoop]
break
def f():
  break
[out]
main, line 1: 'break' outside loop
main: In function "f":
main, line 3: 'break' outside loop

[case testContinueOutsideLoop]
continue
def f():
  continue
[out]
main, line 1: 'continue' outside loop
main: In function "f":
main, line 3: 'continue' outside loop

[case testReturnOutsideFunction]
def f(): pass
return
return 1
[out]
main, line 2: 'return' outside function
main, line 3: 'return' outside function

[case testYieldOutsideFunction]
yield 1
yield
[out]
main, line 1: 'yield' outside function
main, line 2: 'yield' outside function

[case testInvalidLvalues]
1 = 1
(1) = 1
(1, 1) = 1
[1, 1] = 1
() = 1
[out]
main, line 1: Invalid assignment target
main, line 2: Invalid assignment target
main, line 3: Invalid assignment target
main, line 4: Invalid assignment target
main, line 5: Can't assign to ()
--' (hack to fix syntax highlighting)

[case testInvalidLvalues2]
x = y = z = 1
x, (y, 1) = 1
x, [y, 1] = 1
x, [y, [z, 1]] = 1
x, (y, (z, 1)) = 1
x, (y) = 1 # ok
x, (y, (z, z)) = 1 # ok
[out]
main, line 2: Invalid assignment target
main, line 3: Invalid assignment target
main, line 4: Invalid assignment target
main, line 5: Invalid assignment target

[case testInvalidLvalues3]
x = 1
x + x = 1
-x = 1
1.1 = 1
'x' = 1
x() = 1
[out]
main, line 2: Invalid assignment target
main, line 3: Invalid assignment target
main, line 4: Invalid assignment target
main, line 5: Invalid assignment target
main, line 6: Invalid assignment target

[case testInvalidStarType]
a = 1  # type: *int
[out]
main, line 1: Star type only allowed for starred expressions

[case testInvalidStarType]
*a, b = 1  # type: int, int
[out]
main, line 1: Star type expected for starred expression

[case testTwoStarExpressions]
a, *b, *c = 1
*a, (*b, c) = 1
a, (*b, *c) = 1
[*a, *b] = 1
[out]
main, line 1: Two starred expressions in assignment
main, line 3: Two starred expressions in assignment
main, line 4: Two starred expressions in assignment

[case testTwoStarExpressionsInForStmt]
for a, *b, *c in z:
    pass
for *a, (*b, c) in z:
    pass
for a, (*b, *c) in z:
    pass
for [*a, *b] in z:
    pass
[out]
main, line 1: Two starred expressions in assignment
main, line 5: Two starred expressions in assignment
main, line 7: Two starred expressions in assignment

[case testTwoStarExpressionsInGeneratorExpr]
(a for a, *b, *c in [])
(a for *a, (*b, c) in [])
(a for a, (*b, *c) in [])
[out]
main, line 1: Two starred expressions in assignment
main, line 1: Name 'a' is not defined
main, line 3: Two starred expressions in assignment

[case testStarExpressionRhs]
b = 1
c = 1
d = 1
a = *b
a = b, (c, *d)
[out]
main, line 4: Can use starred expression only as assignment target
main, line 5: Can use starred expression only as assignment target

[case testStarExpressionInExp]
a = 1
*a + 1
[out]
main, line 2: Can use starred expression only as assignment target

[case testInvalidDel]
import typing
x = 1
del x(1)  # E: Invalid delete target
del x + 1 # E: Invalid delete target
del z     # E: Name 'z' is not defined
[out]

[case testFunctionTvarScope]
from typing import TypeVar
t = TypeVar('t')
def f(x: t) -> t: pass
x = 0 # type: t
[out]
main, line 4: Invalid type "__main__.t"

[case testClassTvarScope]
from typing import Generic, TypeVar
t = TypeVar('t')
class c(Generic[t]): pass
x = 0 # type: t
[out]
main, line 4: Invalid type "__main__.t"

[case testExpressionRefersToTypeVariable]
from typing import TypeVar, Generic
t = TypeVar('t')
class c(Generic[t]):
    def f(self): x = t
def f(y: t): x = t
[out]
main: In function "f":
main, line 4: 't' is a type variable and only valid in type context
main, line 5: 't' is a type variable and only valid in type context

[case testMissingSelf]
import typing
class A:
  def f(): pass
[out]
main, line 3: Method must have at least one argument

[case testInvalidBaseClass]
import typing
class A(B): pass
[out]
main, line 2: Name 'B' is not defined

[case testSuperOutsideClass]
class A: pass
super().x
def f(): super().y
[out]
main, line 2: "super" used outside class
main: In function "f":
main, line 3: "super" used outside class

[case testMissingSelfInMethod]
import typing
class A:
  def f() -> None: pass
  def g(): pass
[out]
main, line 3: Method must have at least one argument
main, line 4: Method must have at least one argument

[case testMultipleMethodDefinition]
import typing
class A:
  def f(self) -> None: pass
  def g(self) -> None: pass
  def f(self, x: object) -> None: pass
[out]
main, line 5: Name 'f' already defined

[case testInvalidGlobalDecl]
import typing
def f():
    global x
    x = None
[out]
main: In function "f":
main, line 4: Name 'x' is not defined

[case testInvalidNonlocalDecl]
import typing
def f():
    def g():
       nonlocal x
       x = None
[out]
main: In function "g":
main, line 4: No binding for nonlocal 'x' found
main, line 5: Name 'x' is not defined

[case testNonlocalDeclNotMatchingGlobal]
import typing
x = None
def f():
    nonlocal x
    x = None
[out]
main: In function "f":
main, line 4: No binding for nonlocal 'x' found
main, line 5: Name 'x' is not defined

[case testNonlocalDeclConflictingWithParameter]
import typing
def g():
    x = None
    def f(x):
        nonlocal x
        x = None
[out]
main: In function "f":
main, line 5: Name 'x' is already defined in local scope before nonlocal declaration

[case testNonlocalDeclOutsideFunction]
x = 2
nonlocal x
[out]
main, line 2: nonlocal declaration not allowed at module level

[case testGlobalAndNonlocalDecl]
import typing
x = 1
def f():
    x = 1
    def g():
       global x
       nonlocal x
       x = None
[out]
main: In function "g":
main, line 7: Name 'x' is nonlocal and global

[case testNonlocalAndGlobalDecl]
import typing
x = 1
def f():
    x = 1
    def g():
       nonlocal x
       global x
       x = None
[out]
main: In function "g":
main, line 7: Name 'x' is nonlocal and global

[case testNestedFunctionAndScoping]
import typing
def f(x):
    def g(y):
        z = x
    z
    y
    x
[out]
main: In function "f":
main, line 5: Name 'z' is not defined
main, line 6: Name 'y' is not defined

[case testMultipleNestedFunctionDef]
import typing
def f(x):
    def g(): pass
    x = 1
    def g(): pass
[out]
main: In function "f":
main, line 5: Name 'g' already defined

[case testRedefinedOverloadedFunction]
from typing import overload, Any
def f():
    @overload
    def p(o: object) -> None: pass # no error
    @overload
    def p(o: Any) -> None: pass    # no error
    x = 1
    def p(): pass # fail
[out]
main: In function "f":
main, line 8: Name 'p' already defined

[case testNestedFunctionInMethod]
import typing
class A:
   def f(self):
       def g():
           x
       y
[out]
main: In function "g":
main, line 5: Name 'x' is not defined
main: In function "f":
main, line 6: Name 'y' is not defined

[case testImportScope]
import typing
def f() -> None:
    import x
x.y # E: Name 'x' is not defined
[file x.py]
y = 1
[out]

[case testImportScope2]
import typing
def f() -> None:
    from x import y
    y
y # E: Name 'y' is not defined
[file x.py]
y = 1
[out]

[case testImportScope3]
import typing
def f() -> None:
    from x import *
    y
y # E: Name 'y' is not defined
[file x.py]
y = 1
[out]

[case testImportScope4]
import typing
class A:
    from x import *
    y
y # E: Name 'y' is not defined
[file x.py]
y = 1
[out]

[case testImportTwice]
import typing
from x import a, a
def f() -> None:
    from x import a
    from x import a
import x
import x # ok, since we may import multiple submodules of a package
[file x.py]
a = 1
[out]
main, line 2: Name 'a' already defined
main: In function "f":
main, line 5: Name 'a' already defined

[case testScopeOfNestedClass]
import typing
def f():
    class A: pass
    A
A # E: Name 'A' is not defined
[out]

[case testScopeOfNestedClass2]
import typing
class A:
    class B: pass
B # E: Name 'B' is not defined
[out]

[case testScopeOfNestedClass3]
import typing
class A:
    def f(self):
        class B: pass
    B # E: Name 'B' is not defined
B # E: Name 'B' is not defined
[out]

[case testInvalidNestedClassReferenceInDecl]
import typing
class A: pass
foo = 0 # type: A.x      # E: Name 'A.x' is not defined
[out]

[case testTvarScopingWithNestedClass]
from typing import TypeVar, Generic
t = TypeVar('t')
s = TypeVar('s')
class A(Generic[t]):
    class B(Generic[s]):
        x = 0 # type: A[s]
        y = 0 # type: A[t]        # E: Invalid type "__main__.t"
    z = 0 # type: A[s]            # E: Invalid type "__main__.s"
    a = 0 # type: A[t]
[out]

[case testTestExtendPrimitives]
class C(bool): pass # E: 'bool' is not a valid base class
class A(int): pass # ok
class B(float): pass # ok
class D(str): pass # ok
[builtins fixtures/primitives.py]
[out]

[case testCyclicInheritance]
class A(A): pass # E: Cycle in inheritance hierarchy
[out]

[case testAssignToFuncDef]
def f(): pass
f = None # E: Invalid assignment target
[out]

[case testAssignToFuncDefViaModule]
import m
m.f = None # E: Invalid assignment target
[file m.py]
def f(): pass
[out]

[case testAssignToFuncDefViaNestedModules]
import m.n
m.n.f = None # E: Invalid assignment target
[file m/__init__.py]
[file m/n.py]
def f(): pass
[out]

[case testAssignToFuncDefViaImport]
from m import f # E: Name 'f' already defined
f = None
[file m.py]
def f(): pass
[out]

[case testAssignToFuncDefViaImport2]
from m import * # E: Name 'f' already defined
f = None
[file m.py]
def f(): pass
[out]

[case testAssignToFuncDefViaGlobalDecl2]
import typing
from m import f
def g() -> None:
    global f
    f = None # E: Invalid assignment target
[file m.py]
def f(): pass
[out]
main: In function "g":

[case testAssignToTypeDef]
import typing
class A: pass
A = None # E: Invalid assignment target
[out]

[case testInvalidQualifiedName]
from typing import Any
x = 0 # type: Any
z = 0 # type: x.y    # E: Invalid type "__main__.x"
[out]

[case testInvalidCastTargetSyntax]
from typing import cast, TypeVar, Generic
t = TypeVar('t')
class C(Generic[t]): pass
cast(str + str, None)    # E: Cast target is not a type
cast(C[str][str], None)  # E: Cast target is not a type
cast(C[str + str], None) # E: Cast target is not a type
cast([int, str], None)   # E: Invalid type
[out]

[case testInvalidCastTargetType]
from typing import cast
x = 0
cast(x, None)        # E: Invalid type "__main__.x"
cast(t, None)        # E: Name 't' is not defined
cast(__builtins__.x, None) # E: Name '__builtins__.x' is not defined
[out]

[case testInvalidCastTargetType2]
from typing import cast
x = 0
cast(str[str], None) # E: "str" expects no type arguments, but 1 given
[out]

[case testInvalidNumberOfArgsToCast]
from typing import cast
cast(str) # E: 'cast' expects 2 arguments
cast(str, None, None) # E: 'cast' expects 2 arguments
[out]

[case testInvalidKindsOfArgsToCast]
from typing import cast
cast(str, *None) # E: 'cast' must be called with 2 positional arguments
cast(str, target=None) # E: 'cast' must be called with 2 positional arguments
[out]

[case testInvalidArgsToAny]
from typing import Any
Any(str, None) # E: 'Any' expects 1 argument
Any(arg=str)   # E: 'Any' must be called with 1 positional argument
[out]

[case testTypeListAsType]
def f(x:[int, str]) -> None: # E: Invalid type
    pass
[out]
main: In function "f":

[case testInvalidFunctionType]
from typing import Callable
x = None # type: Callable[int, str]
y = None # type: Callable[int]
z = None # type: Callable[int, int, int]
[out]
main, line 2: Invalid function type
main, line 3: Invalid function type
main, line 4: Invalid function type

[case testAbstractGlobalFunction]
import typing
from abc import abstractmethod
@abstractmethod
def foo(): pass
[out]
main, line 3: 'abstractmethod' used with a non-method

[case testAbstractNestedFunction]
import typing
from abc import abstractmethod
def g():
  @abstractmethod
  def foo(): pass
[out]
main: In function "g":
main, line 4: 'abstractmethod' used with a non-method

[case testInvalidTypeDeclaration]
import typing
def f(): pass
f() = 1 # type: int
[out]
main, line 3: Invalid assignment target

[case testIndexedAssignmentWithTypeDeclaration]
import typing
None[1] = 1 # type: int
[out]
main, line 2: Unexpected type declaration

[case testNonSelfMemberAssignmentWithTypeDeclaration]
import typing
None.x = 1 # type: int
[out]
main, line 2: Type cannot be declared in assignment to non-self attribute

[case testNonSelfMemberAssignmentWithTypeDeclarationInMethod]
import typing
class A:
  def f(self, x) -> None:
    x.y = 1 # type: int
[out]
main: In function "f":
main, line 4: Type cannot be declared in assignment to non-self attribute

[case testInvalidUndefined]
from typing import Undefined
y = 1
x = Undefined(Undefined) # E: Invalid type "typing.Undefined"
[out]

[case testInvalidTypeInTypeApplication]
from typing import TypeVar, Generic
t = TypeVar('t')
class A(Generic[t]): pass
A[TypeVar] # E: Invalid type "typing.TypeVar"
[out]

[case testInvalidTypeInTypeApplication2]
from typing import TypeVar, Generic
t = TypeVar('t')
class A(Generic[t]): pass
A[1] # E: Type expected within [...]
[out]

[case testVariableDeclWithInvalidNumberOfTypes]
from typing import Undefined
x, y = 1, 2 # type: int, str, int # E: Incompatible number of tuple items
[out]

[case testVariableDeclWithInvalidNumberOfTypesNested]
from typing import Undefined
x, (y, z) = 1, (2, 3) # type: int, (str, int, int) # E: Incompatible number of tuple items
[out]

[case testVariableDeclWithInvalidNumberOfTypesNested2]
from typing import Undefined
x, (y, z) = 1, (2, 3) # type: int, (str, ) # E: Incompatible number of tuple items
[out]

[case testVariableDeclWithInvalidNumberOfTypesNested3]
from typing import Undefined
x, (y, z) = 1, (2, 3) # type: int, str # E: Tuple type expected for multiple variables
[out]

[case testVariableDeclWithInvalidNumberOfTypesNested4]
from typing import Undefined
x, (y, z) = 1, (2, 3) # type: int, str, int # E: Incompatible number of tuple items
[out]

[case testVariableDeclWithInvalidNumberOfTypesNested5]
from typing import Undefined
x, (y, ) = 1, (2, ) # type: int, str # E: Tuple type expected for multiple variables
[out]

[case testVariableDeclWithInvalidType]
from typing import Undefined
x, y = 1, 2 # type: int # E: Tuple type expected for multiple variables
[out]

[case testInvalidLvalueWithExplicitType]
from typing import Undefined
a = 1
a[1] = Undefined # type: int # E: Unexpected type declaration
a.x = Undefined # type: int \
    # E: Type cannot be declared in assignment to non-self attribute
a() = Undefined # type: int  # E: Invalid assignment target
[out]

[case testInvalidLvalueWithExplicitType2]
from typing import Undefined
a = 1
a[1] = Undefined(int) # TODO: Disallow this?
a() = Undefined(int)  # E: Invalid assignment target
[out]

[case testInvalidLvalueWithExplicitType3]
from typing import Undefined
a = 1
a.y, a.x = Undefined, Undefined # type: int, int \
    # E: Type cannot be declared in assignment to non-self attribute
a[1], a[2] = Undefined, Undefined # type: int, int \
    # E: Unexpected type declaration
[out]

[case testMissingGenericImport]
from typing import TypeVar
T = TypeVar('T')
class A(Generic[T]): pass
[out]
main, line 3: Name 'Generic' is not defined

[case testInvalidTypeWithinGeneric]
from typing import Generic
class A(Generic[int]): pass # E: Free type variable expected in Generic[...]
[out]

[case testInvalidTypeWithinNestedGenericClass]
from typing import Generic, TypeVar
T = TypeVar('T')
class A(Generic[T]):
    class B(Generic[T]): pass \
          # E: Free type variable expected in Generic[...]
[out]

[case testIncludingGenericTwiceInBaseClassList]
from typing import Generic, TypeVar
T = TypeVar('T')
S = TypeVar('S')
class A(Generic[T], Generic[S]): pass \
      # E: Duplicate Generic in bases
[out]

[case testInvalidMetaclass]
class A(metaclass=x): pass # E: Name 'x' is not defined
[out]

[case testInvalidQualifiedMetaclass]
import abc
class A(metaclass=abc.Foo): pass # E: Name 'abc.Foo' is not defined
[out]

[case testNonClassMetaclass]
def f(): pass
class A(metaclass=f): pass # E: Invalid metaclass 'f'
[out]

[case testInvalidTypevarArguments]
from typing import TypeVar
a = TypeVar()       # E: Too few arguments for TypeVar()
b = TypeVar(x='b')  # E: Unexpected arguments to TypeVar()
c = TypeVar(1)      # E: TypeVar() expects a string literal argument
d = TypeVar('D')    # E: Unexpected TypeVar() argument value
e = TypeVar('e', int, str, x=1) # E: Unexpected arguments to TypeVar()
f = TypeVar('f', (int, str)) # E: Type expected
g = TypeVar('g', x=(int, str)) # E: Unexpected arguments to TypeVar()
[out]

[case testInvalidTypevarValues]
from typing import TypeVar
b = TypeVar('b', *[int]) # E: Unexpected arguments to TypeVar()
c = TypeVar('c', int, 2) # E: Type expected
[out]

[case testObsoleteTypevarValuesSyntax]
from typing import TypeVar
a = TypeVar('a', values=(int, str))
[out]
main, line 2: TypeVar 'values' argument not supported
main, line 2: Use TypeVar('T', t, ...) instead of TypeVar('T', values=(t, ...))

[case testLocalTypevarScope]
from typing import TypeVar
def f() -> None:
    T = TypeVar('T')
def g(x: T) -> None: pass # E: Name 'T' is not defined
[out]
main: In function "g":

[case testClassTypevarScope]
from typing import TypeVar
class A:
    T = TypeVar('T')
def g(x: T) -> None: pass # E: Name 'T' is not defined
[out]
main: In function "g":

[case testRedefineVariableAsTypevar]
from typing import TypeVar
x = 0
x = TypeVar('x') # E: Cannot redefine 'x' as a type variable
[out]

[case testTypevarWithType]
from typing import TypeVar
x = TypeVar('x') # type: int # E: Cannot declare the type of a type variable
[out]

[case testRedefineTypevar]
from typing import TypeVar
t = TypeVar('t')
t = 1 # E: Invalid assignment target
[out]

[case testRedefineTypevar2]
from typing import TypeVar
t = TypeVar('t')
def t(): pass # E: Name 't' already defined
[out]

[case testRedefineTypevar3]
from typing import TypeVar
t = TypeVar('t')
class t: pass # E: Name 't' already defined
[out]

[case testRedefineTypevar4]
from typing import TypeVar
t = TypeVar('t')
from typing import Generic as t # E: Name 't' already defined
[out]

[case testInvalidStrLiteralType]
from typing import Undefined
x = Undefined('foo') # E: Name 'foo' is not defined
[out]

[case testInvalidStrLiteralType2]
from typing import Undefined
x = Undefined('int[') # E: Argument to Undefined is not a type
[out]

[case testInconsistentOverload]
from typing import overload
def dec(x): pass
@overload
def f(): pass
@dec  # E: 'overload' decorator expected
def f(): pass
[out]

[case testInconsistentOverload2]
from typing import overload
def dec(x): pass
@dec  # E: 'overload' decorator expected
def f(): pass
@overload
def f(): pass
[out]

[case testMissingOverloadDecorator]
from typing import overload
def dec(x): pass
@dec  # E: 'overload' decorator expected
def f(): pass
@dec  # E: 'overload' decorator expected
def f(): pass
[out]

[case testIncompatibleSignatureInComment]
import typing
def f(): # type: (int) -> int
  pass
def g(x): # type: () -> int
  pass
[out]
main: In function "f":
main, line 2: Type signature has too many arguments
main: In function "g":
main, line 4: Type signature has too few arguments

[case testStaticmethodAndNonMethod]
import typing
@staticmethod
def f(): pass
class A:
  def g(self):
    @staticmethod
    def h(): pass
[builtins fixtures/staticmethod.py]
[out]
main, line 2: 'staticmethod' used with a non-method
main: In function "g":
main, line 6: 'staticmethod' used with a non-method

[case testClassmethodAndNonMethod]
import typing
@classmethod
def f(): pass
class A:
  def g(self):
    @classmethod
    def h(): pass
[builtins fixtures/classmethod.py]
[out]
main, line 2: 'classmethod' used with a non-method
main: In function "g":
main, line 6: 'classmethod' used with a non-method

[case testNonMethodProperty]
import typing
@property  # E: 'property' used with a non-method
def f() -> int: pass
[builtins fixtures/property.py]
[out]

[case testInvalidArgCountForProperty]
import typing
class A:
    @property
    def f(self, x) -> int: pass  # E: Too many arguments
    @property
    def g() -> int: pass   # E: Method must have at least one argument
[builtins fixtures/property.py]
[out]

[case testOverloadedProperty]
from typing import overload
class A:
    @overload  # E: Decorated property not supported
    @property
    def f(self) -> int: pass
    @property  # E: Decorated property not supported
    @overload
    def f(self) -> int: pass
[builtins fixtures/property.py]
[out]

[case testOverloadedProperty2]
from typing import overload
class A:
    @overload
    def f(self) -> int: pass
    @property  # E: Decorated property not supported
    @overload
    def f(self) -> int: pass
[builtins fixtures/property.py]
[out]

[case testDecoratedProperty]
import typing
def dec(f): pass
class A:
    @dec  # E: Decorated property not supported
    @property
    def f(self) -> int: pass
    @property  # E: Decorated property not supported
    @dec
    def g(self) -> int: pass
[builtins fixtures/property.py]
[out]

[case testImportTwoModulesWithSameNameInFunction]
import typing
def f() -> None:
    import x
    import y as x # E: Name 'x' already defined
    x.y
[file x.py]
y = 1
[file y.py]
[out]
main: In function "f":

[case testImportTwoModulesWithSameNameInGlobalContext]
import typing
import x
import y as x # E: Name 'x' already defined
x.y
[file x.py]
y = 1
[file y.py]
[out]

[case testListTypeAliasWithoutImport]
import typing
def f() -> List[int]: pass
[builtins fixtures/list.py]
[out]
main: In function "f":
main, line 2: Name 'List' is not defined

[case testImportObsoleteTypingFunction]
from typing import Function # E: Module has no attribute 'Function' (it's now called 'typing.Callable')
from _m import Function # E: Module has no attribute 'Function'
[file _m.py]
[out]

[case testTypeRefresToObsoleteTypingFunction]
import typing
import _m
def f(x: typing.Function[[], None]) -> None: pass
def g(x: _m.Function[[], None]) -> None: pass
[file _m.py]
[out]
main: In function "f":
main, line 3: Name 'typing.Function' is not defined (it's now called 'typing.Callable')
--'
main: In function "g":
main, line 4: Name '_m.Function' is not defined

[case testUnqualifiedNameRefersToObsoleteTypingFunction]
from typing import Undefined
x = Undefined(Function[[], None])
[out]
main, line 2: Name 'Function' is not defined
main, line 2: (Did you mean 'typing.Callable'?)

[case testInvalidWithTarget]
def f(): pass
with f() as 1: pass  # E: Invalid assignment target
[out]

[case testUseObsoleteNameForTypeVar]
from typing import typevar
t = typevar('t')
[out]
main, line 1: Module has no attribute 'typevar' (it's now called 'typing.TypeVar')
main, line 2: Name 'typevar' is not defined
main, line 2: (Did you mean 'typing.TypeVar'?)
--' (this fixes syntax highlighting)

[case testUseObsoleteNameForTypeVar2]
t = typevar('t')
[out]
main, line 1: Name 'typevar' is not defined
main, line 1: (Did you mean 'typing.TypeVar'?)

[case testUseObsoleteNameForTypeVar3]
import typing
t = typing.typevar('t')
[out]
main, line 2: Module has no attribute 'typevar' (it's now called 'typing.TypeVar')
--' (work around syntax highlighting :-/)

[case testInvalidTypeAnnotation]
import typing
def f() -> None:
    1[2] = 1  # type: int
[out]
main: In function "f":
main, line 3: Unexpected type declaration

[case testInvalidTypeAnnotation2]
import typing
def f() -> None:
    f() = 1  # type: int
[out]
main: In function "f":
main, line 3: Invalid assignment target

[case testInvalidReferenceToAttributeOfOuterClass]
class A:
    class X: pass
    class B:
        y = X  # E: Name 'X' is not defined
[out]

[case testInvalidReferenceToClassFromItsBody]
class A:
    x = A()  # E: Name 'A' is not defined
[out]

[case testInFunctionInvalidReferenceToClassFromItsBody]
def f():
    class A:
        x = A()  # E: Name 'A' is not defined
[out]
main: In function "f":

[case testInvalidReferenceToFunctionInClassBody]
class A:
    x = f()  # E: Name 'f' is not defined

def f(): pass
[out]
