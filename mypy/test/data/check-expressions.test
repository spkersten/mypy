-- Test cases for simple expressions.
--
-- See also:
--  * check-functions.test contains test cases for calls.
--  * check-varargs.test contains test cases for *args.
--  * check-dynamic.test contains test cases related to 'Any' type.
--  * check-generics.test contains test cases for generic values.


-- None expression
-- ---------------


[case testNoneAsRvalue]
import typing
a = None # type: A
class A: pass
[out]

[case testNoneAsArgument]
import typing
def f(x: 'A', y: 'B') -> None: pass
f(None, None)
class A: pass
class B(A): pass
[out]


-- Simple expressions
-- ------------------


[case testIntLiteral]
a = 0
b = None # type: A
b = 1 # E: Incompatible types in assignment (expression has type "int", variable has type "A")
a = 1
class A:
    pass

[case testStrLiteral]
a = ''
b = None # type: A
b = 'x' # E: Incompatible types in assignment (expression has type "str", variable has type "A")
a = 'x'
a = r"x"
a = """foo"""
class A:
    pass

[case testFloatLiteral]
a = 0.0
b = None # type: A
b = 1.1 # E: Incompatible types in assignment (expression has type "float", variable has type "A")
a = 1.1
class A:
    pass
[file builtins.py]
class object:
    def __init__(self): pass
class type: pass
class function: pass
class float: pass
class str: pass

[case testComplexLiteral]
a = 0.0j
b = None # type: A
b = 1.1j # E: Incompatible types in assignment (expression has type "complex", variable has type "A")
a = 1.1j
class A:
    pass
[file builtins.py]
class object:
    def __init__(self): pass
class type: pass
class function: pass
class complex: pass
class str: pass

[case testBytesLiteral]
b, a = None, None # type: (bytes, A)
b = b'foo'
b = br"foo"
b = b'''foo'''
a = b'foo' # E: Incompatible types in assignment (expression has type "bytes", variable has type "A")
class A: pass
[file builtins.py]
class object:
    def __init__(self): pass
class type: pass
class tuple: pass
class function: pass
class bytes: pass
class str: pass

[case testUnicodeLiteralInPython3]
s = None  # type: str
s = u'foo'
b = None  # type: bytes
b = u'foo' # E: Incompatible types in assignment (expression has type "str", variable has type "bytes")
[builtins fixtures/primitives.py]


-- Binary operators
-- ----------------


[case testAdd]

a, b, c = None, None, None # type: (A, B, C)
c = a + c  # Fail
a = a + b  # Fail
c = b + a  # Fail
c = a + b

class A:
    def __add__(self, x: 'B') -> 'C': pass
class B: pass
class C: pass
[out]
main, line 3: Unsupported operand types for + ("A" and "C")
main, line 4: Incompatible types in assignment (expression has type "C", variable has type "A")
main, line 5: Unsupported left operand type for + ("B")
[case testAdd]

a, b, c = None, None, None # type: (A, B, C)
c = a + c  # Fail
a = a + b  # Fail
c = b + a  # Fail
c = a + b

class A:
    def __add__(self, x: 'B') -> 'C':
        pass
class B:
    pass
class C:
    pass
[out]
main, line 3: Unsupported operand types for + ("A" and "C")
main, line 4: Incompatible types in assignment (expression has type "C", variable has type "A")
main, line 5: Unsupported left operand type for + ("B")

[case testSub]

a, b, c = None, None, None # type: (A, B, C)
c = a - c  # Fail
a = a - b  # Fail
c = b - a  # Fail
c = a - b

class A:
    def __sub__(self, x: 'B') -> 'C':
        pass
class B:
    pass
class C:
    pass
[out]
main, line 3: Unsupported operand types for - ("A" and "C")
main, line 4: Incompatible types in assignment (expression has type "C", variable has type "A")
main, line 5: Unsupported left operand type for - ("B")

[case testMul]

a, b, c = None, None, None # type: (A, B, C)
c = a * c  # Fail
a = a * b  # Fail
c = b * a  # Fail
c = a * b

class A:
    def __mul__(self, x: 'B') -> 'C':
        pass
class B:
    pass
class C:
    pass
[out]
main, line 3: Unsupported operand types for * ("A" and "C")
main, line 4: Incompatible types in assignment (expression has type "C", variable has type "A")
main, line 5: Unsupported left operand type for * ("B")

[case testDiv]

a, b, c = None, None, None # type: (A, B, C)
c = a / c  # Fail
a = a / b  # Fail
c = b / a  # Fail
c = a / b

class A:
    def __truediv__(self, x: 'B') -> 'C':
        pass
class B:
    pass
class C:
    pass
[out]
main, line 3: Unsupported operand types for / ("A" and "C")
main, line 4: Incompatible types in assignment (expression has type "C", variable has type "A")
main, line 5: Unsupported left operand type for / ("B")

[case testIntDiv]

a, b, c = None, None, None # type: (A, B, C)
c = a // c  # Fail
a = a // b  # Fail
c = b // a  # Fail
c = a // b

class A:
    def __floordiv__(self, x: 'B') -> 'C':
        pass
class B:
    pass
class C:
    pass
[out]
main, line 3: Unsupported operand types for // ("A" and "C")
main, line 4: Incompatible types in assignment (expression has type "C", variable has type "A")
main, line 5: Unsupported left operand type for // ("B")

[case testMod]

a, b, c = None, None, None # type: (A, B, C)
c = a % c  # Fail
a = a % b  # Fail
c = b % a  # Fail
c = a % b

class A:
    def __mod__(self, x: 'B') -> 'C':
        pass
class B:
    pass
class C:
    pass
[out]
main, line 3: Unsupported operand types for % ("A" and "C")
main, line 4: Incompatible types in assignment (expression has type "C", variable has type "A")
main, line 5: Unsupported left operand type for % ("B")

[case testPow]

a, b, c = None, None, None # type: (A, B, C)
c = a ** c  # Fail
a = a ** b  # Fail
c = b ** a  # Fail
c = a ** b

class A:
    def __pow__(self, x: 'B') -> 'C':
        pass
class B:
    pass
class C:
    pass
[out]
main, line 3: Unsupported operand types for ** ("A" and "C")
main, line 4: Incompatible types in assignment (expression has type "C", variable has type "A")
main, line 5: Unsupported left operand type for ** ("B")

[case testMiscBinaryOperators]

a, b = None, None # type: (A, B)
b = a & a  # Fail
b = a | b  # Fail
b = a ^ a  # Fail
b = a << b # Fail
b = a >> a # Fail

b = a & b
b = a | a
b = a ^ b
b = a << a
b = a >> b
class A:
  def __and__(self, x: 'B') -> 'B': pass
  def __or__(self, x: 'A') -> 'B': pass
  def __xor__(self, x: 'B') -> 'B': pass
  def __lshift__(self, x: 'A') -> 'B': pass
  def __rshift__(self, x: 'B') -> 'B': pass
class B: pass
[out]
main, line 3: Unsupported operand types for & ("A" and "A")
main, line 4: Unsupported operand types for | ("A" and "B")
main, line 5: Unsupported operand types for ^ ("A" and "A")
main, line 6: Unsupported operand types for << ("A" and "B")
main, line 7: Unsupported operand types for >> ("A" and "A")

[case testBooleanAndOr]

a, b = None, None # type: (A, bool)
b = b and b
b = b or b
b = b and a # E: Incompatible types in assignment (expression has type "object", variable has type "bool")
b = a and b # E: Incompatible types in assignment (expression has type "object", variable has type "bool")
b = b or a  # E: Incompatible types in assignment (expression has type "object", variable has type "bool")
b = a or b  # E: Incompatible types in assignment (expression has type "object", variable has type "bool")
class A: pass
[builtins fixtures/bool.py]

[case testNonBooleanOr]

c, d, b = None, None, None # type: (C, D, bool)
c = c or c
c = c or d
c = d or c
b = c or c # E: Incompatible types in assignment (expression has type "C", variable has type "bool")
d = c or d # E: Incompatible types in assignment (expression has type "C", variable has type "D")
d = d or c # E: Incompatible types in assignment (expression has type "C", variable has type "D")
class C: pass
class D(C): pass
[builtins fixtures/bool.py]

[case testInOperator]
from typing import Iterator, Iterable, Any
a, b, c, d, e = None, None, None, None, None # type: (A, B, bool, D, Any)
c = c in a  # Fail
a = b in a  # Fail
c = a in b  # Fail
c = b in d  # Fail
c = b in a
c = a in d
c = e in d
c = a in e

class A:
    def __contains__(self, x: 'B') -> bool: pass
class B: pass
class D(Iterable[A]):
    def __iter__(self) -> Iterator[A]: pass
[builtins fixtures/bool.py]
[out]
main, line 3: Unsupported operand types for in ("bool" and "A")
main, line 4: Incompatible types in assignment (expression has type "bool", variable has type "A")
main, line 5: Unsupported right operand type for in ("B")
main, line 6: Unsupported operand types for in ("B" and "D")

[case testNotInOperator]
from typing import Iterator, Iterable, Any
a, b, c, d, e = None, None, None, None, None # type: (A, B, bool, D, Any)
c = c not in a  # Fail
a = b not in a  # Fail
c = a not in b  # Fail
c = b not in d  # Fail
c = b not in a
c = a not in d
c = e in d
c = a in e

class A:
    def __contains__(self, x: 'B') -> bool: pass
class B: pass
class D(Iterable[A]):
    def __iter__(self) -> Iterator[A]: pass
[builtins fixtures/bool.py]
[out]
main, line 3: Unsupported operand types for in ("bool" and "A")
main, line 4: Incompatible types in assignment (expression has type "bool", variable has type "A")
main, line 5: Unsupported right operand type for in ("B")
main, line 6: Unsupported operand types for in ("B" and "D")

[case testNonBooleanContainsReturnValue]

a, b = None, None # type: (A, bool)
b = a not in a
b = a in a

class A:
  def __contains__(self, x: 'A') -> object: pass
[builtins fixtures/bool.py]
[out]
main, line 4: Incompatible types in assignment (expression has type "object", variable has type "bool")

[case testEq]

a, b = None, None # type: (A, bool)
a = a == b # Fail
a = a != b # Fail
b = a == b
b = a != b

class A:
  def __eq__(self, o: object) -> bool: pass
  def __ne__(self, o: object) -> bool: pass
[builtins fixtures/bool.py]
[out]
main, line 3: Incompatible types in assignment (expression has type "bool", variable has type "A")
main, line 4: Incompatible types in assignment (expression has type "bool", variable has type "A")

[case testLtAndGt]

a, b, bo = None, None, None # type: (A, B, bool)
a = a < b # Fail
a = a > b # Fail
bo = a < b
bo = a > b

class A:
    def __lt__(self, o: 'B') -> bool: pass
    def __gt__(self, o: 'B') -> bool: pass
class B:
    def __lt__(self, o: 'B') -> bool: pass
    def __gt__(self, o: 'B') -> bool: pass
[builtins fixtures/bool.py]
[out]
main, line 3: Incompatible types in assignment (expression has type "bool", variable has type "A")
main, line 4: Incompatible types in assignment (expression has type "bool", variable has type "A")

[case testLeAndGe]

a, b, bo = None, None, None # type: (A, B, bool)
a = a <= b # Fail
a = a >= b # Fail
bo = a <= b
bo = a >= b

class A:
    def __le__(self, o: 'B') -> bool: pass
    def __ge__(self, o: 'B') -> bool: pass
class B:
    def __le__(self, o: 'B') -> bool: pass
    def __ge__(self, o: 'B') -> bool: pass
[builtins fixtures/bool.py]
[out]
main, line 3: Incompatible types in assignment (expression has type "bool", variable has type "A")
main, line 4: Incompatible types in assignment (expression has type "bool", variable has type "A")

[case testChainedComp]

a, b, bo = None, None, None # type: (A, B, bool)
a < a < b < b # Fail
a < b < b < b
a < a > a < b # Fail

class A:
    def __lt__(self, o: 'B') -> bool: pass
    def __gt__(self, o: 'B') -> bool: pass
class B:
    def __lt__(self, o: 'B') -> bool: pass
    def __gt__(self, o: 'B') -> bool: pass
[builtins fixtures/bool.py]
[out]
main, line 3: Unsupported operand types for > ("A" and "A")
main, line 5: Unsupported operand types for > ("A" and "A")
main, line 5: Unsupported operand types for < ("A" and "A")


[case testChainedCompBoolRes]

a, b, bo = None, None, None # type: (A, B, bool)
bo = a < b < b
a = a < b < b # Fail

class A:
    def __lt__(self, o: 'B') -> bool: pass
    def __gt__(self, o: 'B') -> bool: pass
class B:
    def __lt__(self, o: 'B') -> bool: pass
    def __gt__(self, o: 'B') -> bool: pass
[builtins fixtures/bool.py]
[out]
main, line 4: Incompatible types in assignment (expression has type "bool", variable has type "A")


[case testChainedCompResTyp]

x, y = None, None # type: (X, Y)
a, b, p, bo = None, None, None, None # type: (A, B, P, bool)
b = y == y == y
bo = y == y == y # Fail
a = x < y
a = x < y == y # Fail
p = x < y == y

class P:
    pass
class A(P):
    pass
class B(P):
    pass

class X:
    def __lt__(self, o: 'Y') -> A: pass
    def __gt__(self, o: 'Y') -> A: pass
class Y:
    def __lt__(self, o: 'Y') -> A: pass
    def __gt__(self, o: 'Y') -> A: pass
    def __eq__(self, o: 'Y') -> B: pass
[builtins fixtures/bool.py]
[out]
main, line 5: Incompatible types in assignment (expression has type "B", variable has type "bool")
main, line 7: Incompatible types in assignment (expression has type "P", variable has type "A")


[case testIs]

a, b = None, None # type: (A, bool)
a = a is b # Fail
b = a is b
b = b is a
b = a is None
class A: pass
[builtins fixtures/bool.py]
[out]
main, line 3: Incompatible types in assignment (expression has type "bool", variable has type "A")

[case testIsNot]

a, b = None, None # type: (A, bool)
a = a is not b # Fail
b = a is not b
b = b is not a
b = a is not None
class A: pass
[builtins fixtures/bool.py]
[out]
main, line 3: Incompatible types in assignment (expression has type "bool", variable has type "A")

[case testReverseBinaryOperator]

class A:
    def __add__(self, x: int) -> int: pass
class B:
    def __radd__(self, x: A) -> str: pass
s = None  # type: str
n = None  # type: int
n = A() + 1
s = A() + B()
n = A() + B() # E: Incompatible types in assignment (expression has type "str", variable has type "int")

[case testReverseBinaryOperator2]

class A:
    def __add__(self, x: 'A') -> object: pass
class B:
    def __radd__(self, x: A) -> str: pass
s = None  # type: str
n = None  # type: int
s = A() + B()
n = A() + B() # E: Incompatible types in assignment (expression has type "str", variable has type "int")

[case testReverseBinaryOperator3]

class N:
    def __add__(self, x: 'N') -> object: pass
class A:
    def __add__(self, x: N) -> int: pass
class B:
    def __radd__(self, x: N) -> str: pass
s = None  # type: str
s = A() + B() # E: Unsupported operand types for + ("A" and "B")

[case testBinaryOperatorWithAnyRightOperand]
from typing import Any
class A: pass
A() + Any(1)

[case testReverseComparisonOperator]

class C:
    def __gt__(self, x: 'A') -> object: pass
class A:
    def __lt__(self, x: C) -> int: pass
class B:
    def __gt__(self, x: A) -> str: pass
s = None  # type: str
n = None  # type: int
n = A() < C()
s = A() < B()
n = A() < B() # E: Incompatible types in assignment (expression has type "str", variable has type "int")
s = object() < B() # E: Unsupported operand types for > ("B" and "object")

[case testErrorContextAndBinaryOperators]
import typing
class A:
    def __getitem__(self, i: str) -> int: pass
def f() -> None:
    A()[1] # Error
class B:
    A()[1] # Error
A()[1] # Error
[out]
main: In function "f":
main, line 5: Invalid index type "int" for "A"
main: In class "B":
main, line 7: Invalid index type "int" for "A"
main: At top level:
main, line 8: Invalid index type "int" for "A"

[case testErrorContextAndBinaryOperators2]
import m
[file m.py]
import typing
class A:
    def __getitem__(self, i: str) -> int: pass
def f() -> None:
    A()[1] # Error
class B:
    A()[1] # Error
A()[1] # Error
[out]
In module imported in main, line 1:
tmp/m.py: In function "f":
tmp/m.py, line 5: Invalid index type "int" for "A"
tmp/m.py: In class "B":
tmp/m.py, line 7: Invalid index type "int" for "A"
tmp/m.py: At top level:
tmp/m.py, line 8: Invalid index type "int" for "A"


-- Unary operators
-- ---------------


[case testUnaryMinus]

a, b = None, None # type: (A, B)
a = -a   # Fail
b = -b   # Fail
b = -a

class A:
    def __neg__(self) -> 'B':
        pass
class B:
    pass
[out]
main, line 3: Incompatible types in assignment (expression has type "B", variable has type "A")
main, line 4: Unsupported operand type for unary - ("B")

[case testUnaryPlus]

a, b = None, None # type: (A, B)
a = +a   # Fail
b = +b   # Fail
b = +a

class A:
    def __pos__(self) -> 'B':
        pass
class B:
    pass
[out]
main, line 3: Incompatible types in assignment (expression has type "B", variable has type "A")
main, line 4: Unsupported operand type for unary + ("B")

[case testUnaryNot]

a, b = None, None # type: (A, bool)
a = not b  # Fail
b = not a
b = not b
class A:
    pass
[builtins fixtures/bool.py]
[out]
main, line 3: Incompatible types in assignment (expression has type "bool", variable has type "A")

[case testUnaryBitwiseNeg]

a, b = None, None # type: (A, B)
a = ~a   # Fail
b = ~b   # Fail
b = ~a

class A:
    def __invert__(self) -> 'B':
        pass
class B:
    pass
[out]
main, line 3: Incompatible types in assignment (expression has type "B", variable has type "A")
main, line 4: Unsupported operand type for ~ ("B")


-- Indexing
-- --------


[case testIndexing]

a, b, c = None, None, None # type: (A, B, C)
c = a[c]  # Fail
a = a[b]  # Fail
c = b[a]  # Fail
c = a[b]

class A:
    def __getitem__(self, x: 'B') -> 'C':
        pass
class B: pass
class C: pass
[out]
main, line 3: Invalid index type "C" for "A"
main, line 4: Incompatible types in assignment (expression has type "C", variable has type "A")
main, line 5: Value of type "B" is not indexable

[case testIndexingAsLvalue]

a, b, c = None, None, None # type: (A, B, C)
a[c] = c  # Fail
a[b] = a  # Fail
b[a] = c  # Fail
a[b] = c

class A:
    def __setitem__(self, x: 'B', y: 'C') -> None:
        pass
class B:
    pass
class C:
    pass
[out]
main, line 3: Invalid index type "C" for "A"
main, line 4: Incompatible types in assignment
main, line 5: Unsupported target for indexed assignment


-- Cast expression
-- ---------------


[case testCastExpressions]
from typing import cast, Any
class A: pass
class B: pass
class C(A): pass
a, b, c = None, None, None # type: (A, B, C)

a = cast(A, a())       # E: "A" not callable
a = cast(Any, a())     # E: "A" not callable
b = cast(A, a)         # E: Incompatible types in assignment (expression has type "A", variable has type "B")

a = cast(A, b)
a = cast(A, a)
c = cast(C, a)
a = cast(A, c)
a = cast(Any, b)
b = cast(Any, a)
[out]

[case testAnyCast]
from typing import cast, Any
a, b = None, None # type: (A, B)
a = Any(a())     # Fail
a = Any(b)
b = Any(a)
class A: pass
class B: pass
[out]
main, line 3: "A" not callable


-- None return type
-- ----------------


[case testNoneReturnTypeBasics]

a, o = None, None # type: (A, object)
a = f()         # Fail
o = A().g(a)    # Fail
A().g(f())      # Fail
x = f() # type: A # Fail
f()
A().g(a)

def f() -> None:
    pass

class A:
    def g(self, x: object) -> None:
        pass
[out]
main, line 3: "f" does not return a value
main, line 4: "g" of "A" does not return a value
main, line 5: "f" does not return a value
main, line 6: "f" does not return a value

[case testNoneReturnTypeWithStatements]
import typing
raise f() # Fail
if f():   # Fail
    pass
elif f(): # Fail
    pass
while f(): # Fail
    pass
def g() -> object:
    return f() # Fail

def f() -> None: pass
[builtins fixtures/exception.py]
[out]
main, line 2: "f" does not return a value
main, line 3: "f" does not return a value
main, line 5: "f" does not return a value
main, line 7: "f" does not return a value
main: In function "g":
main, line 10: "f" does not return a value

[case testNoneReturnTypeWithExpressions]
from typing import cast
a = None # type: A
[f()]       # E: "f" does not return a value
f() + a     # E: "f" does not return a value
a + f()     # E: "f" does not return a value
f() == a    # E: "f" does not return a value
a != f()    # E: Unsupported left operand type for != ("A")
cast(A, f()) # E: "f" does not return a value
f().foo     # E: "f" does not return a value

def f() -> None: pass
class A:
    def __add__(self, x: 'A') -> 'A': pass
[builtins fixtures/list.py]

[case testNoneReturnTypeWithExpressions2]

a, b = None, None # type: (A, bool)
a < f()    # E: Unsupported left operand type for < ("A")
f() <= a   # E: "f" does not return a value
f() in a   # E: Unsupported right operand type for in ("A")
a in f()   # E: "f" does not return a value
-f()       # E: "f" does not return a value
not f()    # E: "f" does not return a value
f() and b  # E: "f" does not return a value
b or f()   # E: "f" does not return a value

def f() -> None: pass
class A:
    def __add__(self, x: 'A') -> 'A':
        pass
[builtins fixtures/bool.py]


-- Slicing
-- -------


[case testGetSlice]

a, b = None, None # type: (A, B)
a = a[1:2] # E: Incompatible types in assignment (expression has type "B", variable has type "A")
a = a[1:]  # E: Incompatible types in assignment (expression has type "B", variable has type "A")
a = a[:2]  # E: Incompatible types in assignment (expression has type "B", variable has type "A")
a = a[:]   # E: Incompatible types in assignment (expression has type "B", variable has type "A")

b = a[1:2]
b = a[1:]
b = a[:2]
b = a[:]

class A:
  def __getitem__(self, s: slice) -> 'B': pass
class B: pass
[builtins fixtures/slice.py]

[case testSlicingWithInvalidBase]

a = None # type: A
a[1:2] # E: Invalid index type "slice" for "A"
a[:]   # E: Invalid index type "slice" for "A"
class A:
  def __getitem__(self, n: int) -> 'A': pass
[builtins fixtures/slice.py]

[case testSlicingWithNonindexable]

o = None # type: object
o[1:2] # E: Value of type "object" is not indexable
o[:]   # E: Value of type "object" is not indexable
[builtins fixtures/slice.py]

[case testNonIntSliceBounds]
from typing import Any
a, o = None, None # type: (Any, object)
a[o:1] # E: Slice index must be an integer or None
a[1:o] # E: Slice index must be an integer or None
a[o:]  # E: Slice index must be an integer or None
a[:o]  # E: Slice index must be an integer or None
[builtins fixtures/slice.py]

[case testNoneSliceBounds]
from typing import Any
a = None # type: Any
a[None:1]
a[1:None]
a[None:]
a[:None]
[builtins fixtures/slice.py]


-- String interpolation
-- --------------------


[case testStringInterpolationType]
from typing import Any
i, f, s = None, None, None # type: (int, float, str)
'%d' % i
'%f' % f
'%s' % s
'%d' % s  # E: Incompatible types in string interpolation (expression has type "str", placeholder has type "Union[int, float]")
'%f' % s  # E: Incompatible types in string interpolation (expression has type "str", placeholder has type "Union[int, float]")
[builtins fixtures/primitives.py]

[case testStringInterpolationSAcceptsAnyType]
from typing import Any
i, o, s = None, None, None # type: (int, object, str)
'%s %s %s' % (i, o, s)
[builtins fixtures/primitives.py]

[case testStringInterpolationCount]
'%d %d' % 1  # E: Not enough arguments for format string
'%d %d' % (1, 2)
'%d %d' % (1, 2, 3)  # E: Not all arguments converted during string formatting
t = 1, 's'
'%d %s' % t
'%s %d' % t  # E: Incompatible types in string interpolation (expression has type "str", placeholder has type "Union[int, float]")
'%d' % t  # E: Not all arguments converted during string formatting
[builtins fixtures/primitives.py]

[case testStringInterpolationWithAnyType]
from typing import Any
a = None # type: Any
'%d %d' % a
[builtins fixtures/primitives.py]

[case testStringInterpolationInvalidPlaceholder]
'%W' % 1  # E: Unsupported format character 'W'

[case testStringInterpolationWidth]
'%2f' % 3.14
'%*f' % 3.14 # E: Not enough arguments for format string
'%*f' % (4, 3.14)
'%*f' % (1.1, 3.14) # E: * wants int
[builtins fixtures/primitives.py]

[case testStringInterpolationPrecision]
'%.2f' % 3.14
'%.*f' % 3.14 # E: Not enough arguments for format string
'%.*f' % (4, 3.14)
'%.*f' % (1.1, 3.14) # E: * wants int
[builtins fixtures/primitives.py]

[case testStringInterpolationWidthAndPrecision]
'%4.2f' % 3.14
'%4.*f' % 3.14 # E: Not enough arguments for format string
'%*.2f' % 3.14 # E: Not enough arguments for format string
'%*.*f' % 3.14 # E: Not enough arguments for format string
'%*.*f' % (4, 2, 3.14)
[builtins fixtures/primitives.py]

[case testStringInterpolationFlagsAndLengthModifers]
'%04hd' % 1
'%-.4ld' % 1
'%+*Ld' % (1, 1)
'% .*ld' % (1, 1)
[builtins fixtures/primitives.py]

[case testStringInterpolationDoublePercentage]
'%% %d' % 1
'%3% %d' % 1
'%*%' % 1
'%*% %d' % 1  # E: Not enough arguments for format string
[builtins fixtures/primitives.py]

[case testStringInterpolationC]
'%c' % 1
'%c' % 's'
'%c' % ''  # E: %c requires int or char
'%c' % 'ab'  # E: %c requires int or char
[builtins fixtures/primitives.py]

[case testStringInterpolationMappingTypes]
'%(a)d %(b)s' % {'a': 1, 'b': 's'}
'%(a)d %(b)s' % {'a': 's', 'b': 1}  # E: Incompatible types in string interpolation (expression has type "str", placeholder with key 'a' has type "Union[int, float]")
[builtins fixtures/primitives.py]

[case testStringInterpolationMappingKeys]
'%()d' % {'': 2}
'%(a)d' % {'a': 1, 'b': 2, 'c': 3}
'%(q)d' % {'a': 1, 'b': 2, 'c': 3}  # E: Key 'q' not found in mapping
[builtins fixtures/dict.py]

[case testStringInterpolationMappingDictTypes]
from typing import Any, Dict
a = None # type: Any
ds, do, di = None, None, None # type: Dict[str, int], Dict[object, int], Dict[int, int]
'%(a)' % 1  # E: Format requires a mapping (expression has type "int", expected type for mapping is Dict[Any, Any])
'%()d' % a
'%()d' % ds
'%()d' % do
[builtins fixtures/dict.py]

[case testStringInterpolationMappingInvalidDictTypes-skip]
from typing import Any, Dict
di = None # type: Dict[int, int]
'%()d' % di  # E: Format requires a mapping (expression has type Dict[int, int], expected type for mapping is Dict[str, Any])
[builtins fixtures/dict.py]

[case testStringInterpolationMappingInvalidSpecifiers]
'%(a)d %d' % 1  # E: String interpolation mixes specifier with and without mapping keys
'%(b)*d' % 1  # E: String interpolation contains both stars and mapping keys
'%(b).*d' % 1  # E: String interpolation contains both stars and mapping keys

[case testStringInterpolationMappingFlagsAndLengthModifiers]
'%(a)1d' % {'a': 1}
'%(a).1d' % {'a': 1}
'%(a)#1.1ld' % {'a': 1}
[builtins fixtures/dict.py]


-- Lambdas
-- -------


[case testTrivialLambda]
from typing import Callable
f = lambda: 1 # type: Callable[[], int]
f = lambda: ''.x
f = lambda: ''
[out]
main, line 3: "str" has no attribute "x"
main, line 4: Incompatible return value type: expected builtins.int, got builtins.str
main, line 4: Incompatible types in assignment (expression has type Callable[[], str], variable has type Callable[[], int])

[case testVoidLambda]
import typing
def void() -> None:
    pass
x = lambda: void() # type: typing.Callable[[], None]


-- List comprehensions
-- -------------------


[case testSimpleListComprehension]
from typing import List
a = None # type: List[A]
a = [x for x in a]
b = [x for x in a] # type: List[B] # E: List comprehension has incompatible type List[A]
class A: pass
class B: pass
[builtins fixtures/for.py]

[case testSimpleListComprehensionNestedTuples]
from typing import List
l = None # type: List[(A, (A, B))]
a = [a2 for a1, (a2, b1) in l] # type: List[A]
b = [a2 for a1, (a2, b1) in l] # type: List[B] # E: List comprehension has incompatible type List[A]
class A: pass
class B: pass
[builtins fixtures/for.py]

[case testSimpleListComprehensionNestedTuples2]
from typing import List
l = None # type: List[(int, (int, str))]
a = [f(d) for d, (i, s) in l]
b = [f(s) for d, (i, s) in l] # E: Argument 1 to "f" has incompatible type "str"; expected "int"

def f(x: int): pass
[builtins fixtures/for.py]

[case testListComprehensionWithNonDirectMapping]
from typing import List
a = None # type: List[A]
b = None # type: List[B]
b = [f(x) for x in a]
a = [f(x) for x in a] # E: List comprehension has incompatible type List[B]
([f(x) for x in b])   # E: Argument 1 to "f" has incompatible type "B"; expected "A"
class A: pass
class B: pass
def f(a: A) -> B: pass
[builtins fixtures/for.py]

[case testErrorInListComprehensionCondition]
from typing import List
a = None # type: List[A]
a = [x for x in a if x()] # E: "A" not callable
class A: pass
[builtins fixtures/for.py]

[case testTypeInferenceOfListComprehension]
from typing import List
a = None # type: List[A]
o = [x for x in a] # type: List[object]
class A: pass
[builtins fixtures/for.py]


-- Set comprehension
-- -----------------


[case testSimpleSetComprehension]
from typing import Set
a = None # type: Set[A]
a = {x for x in a}
b = {x for x in a} # type: Set[B] # E: Set comprehension has incompatible type Set[A]
class A: pass
class B: pass
[builtins fixtures/set.py]


-- Dictionary comprehension
-- ------------------------


[case testSimpleDictionaryComprehension]
from typing import Dict, List, Tuple
abd = None # type: Dict[A, B]
abl = None # type: List[Tuple[A, B]]
abd = {a: b for a, b in abl}
x = {a: b for a, b in abl} # type: Dict[B, A]
y = {a: b for a, b in abl} # type: A
class A: pass
class B: pass
[builtins fixtures/dict.py]
[out]
main, line 5: Key expression in dictionary comprehension has incompatible type "A"; expected type "B"
main, line 5: Value expression in dictionary comprehension has incompatible type "B"; expected type "A"
main, line 6: Incompatible types in assignment (expression has type Dict[A, B], variable has type "A")


[case testDictionaryComprehensionWithNonDirectMapping]
from typing import Dict, List, Tuple
abd = None # type: Dict[A, B]
abl = None # type: List[Tuple[A, B]]
abd = {a: f(b) for a, b in abl}
class A: pass
class B: pass
class C: pass
def f(b: A) -> C: pass
[builtins fixtures/dict.py]
[out]
main, line 4: Argument 1 to "f" has incompatible type "B"; expected "A"
main, line 4: Value expression in dictionary comprehension has incompatible type "C"; expected type "B"


-- Generator expressions
-- ---------------------


[case testSimpleGeneratorExpression]
from typing import Iterator
# The implementation is mostly identical to list comprehensions, so a single
# test case is ok.
a = None # type: Iterator[int]
a = x for x in a
b = None # type: Iterator[str]
b = x for x in a # E: Generator has incompatible item type "int"
[builtins fixtures/for.py]


-- Conditional expressions
-- -----------------------


[case testSimpleConditionalExpression]
import typing
y = ''
x = 1 if y else 2
x = 3
x = '' # E: Incompatible types in assignment (expression has type "str", variable has type "int")

[case testConditionalExpressionWithEmptyCondition]
import typing
def f() -> None: pass
x = 1 if f() else 2 # E: "f" does not return a value

[case testConditionalExpressionWithSubtyping]
import typing
class A: pass
class B(A): pass
x = B() if None else A()
x = A()
x = '' # E: Incompatible types in assignment (expression has type "str", variable has type "A")
y = A() if None else B()
y = A()
y = '' # E: Incompatible types in assignment (expression has type "str", variable has type "A")

[case testConditionalExpressionAndTypeContext]
import typing
x = [1] if None else []
x = [1]
x = ['x'] # E: List item 0 has incompatible type "str"
[builtins fixtures/list.py]


-- Special cases
-- -------------


[case testOperationsWithNonInstanceTypes]
from typing import cast
class A:
    def __add__(self, a: 'A') -> 'A': pass
a = None # type: A
None + a   # Fail
f + a      # Fail
a + f      # Fail
cast(A, f)

def f() -> None:
    pass
[out]
main, line 5: Unsupported left operand type for + (None)
main, line 6: Unsupported left operand type for + (Callable[[], None])
main, line 7: Unsupported operand types for + ("A" and Callable[[], None])

[case testOperatorMethodWithInvalidArgCount]

a = None # type: A
a + a  # Fail

class A:
    def __add__(self) -> 'A':
        pass
[out]
main, line 3: Too many arguments for "__add__" of "A"

[case testOperatorMethodAsVar]
from typing import Any
class A:
    def __init__(self, _add: Any) -> None:
        self.__add__ = _add
a = None # type: A
a + a
[out]

[case testOperatorMethodAsVar2]

class A:
    def f(self, x: int) -> str: pass
    __add__ = f
s = None  # type: str
s = A() + 1
A() + (A() + 1)
[out]
main, line 7: Argument 1 has incompatible type "str"; expected "int"

[case testIndexedLvalueWithSubtypes]

a, b, c = None, None, None # type: (A, B, C)
a[c] = c
a[b] = c
a[c] = b

class A:
    def __setitem__(self, x: 'B', y: 'B') -> None:
        pass
class B:
    pass
class C(B):
    pass
[out]


-- Ellipsis
-- --------


[case testEllipsis]

a = None # type: A
a = ...  # E: Incompatible types in assignment (expression has type "ellipsis", variable has type "A")
b = ...
c = ...
b = c
....__class__
....a  # E: "ellipsis" has no attribute "a"

class A: pass
[file builtins.py]
class object:
    def __init__(self): pass
class ellipsis:
    def __init__(self): pass
    __class__ = object()
class type: pass
class function: pass
class str: pass
[out]


-- Yield
-- -----


[case testYieldExprIterator]
from typing import Iterator
def f() -> Iterator[int]:
    x = yield 42
[out]
main: In function "f":
main, line 3: Generator function return type expected for "yield"

[case testYieldExprSendType]
from typing import Generator
def f() -> Generator[int, str, None]:
    s = 's'
    s = yield 42

def g() -> Generator[int, str, None]:
    x = yield 42
    x = 1

def h() -> Generator[int, str, None]:
    x = 1
    x = yield 42
[out]
main: In function "g":
main, line 8: Incompatible types in assignment (expression has type "int", variable has type "str")
main: In function "h":
main, line 12: Incompatible types in assignment (expression has type "str", variable has type "int")

[case testYieldExprYieldType]
from typing import Generator
class A(): pass
class B(A): pass

def f() -> Generator[A, str, None]:
    s = yield B()

def g() -> Generator[B, str, None]:
    s = yield A()
[out]
main: In function "g":
main, line 9: Incompatible types in yield (actual type "A", expected (subtype of) type "B")
